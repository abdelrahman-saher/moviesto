// Mocks generated by Mockito 5.1.0 from annotations
// in moviesto/test/domain/sign_up/usecases/signup_with_google_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:moviesto/data/sign_up/failures.dart' as _i5;
import 'package:moviesto/domain/sign_up/entities/social_credential.dart' as _i6;
import 'package:moviesto/domain/sign_up/entities/user.dart' as _i7;
import 'package:moviesto/domain/sign_up/repositories/signup_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [SignupRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignupRepository extends _i1.Mock implements _i3.SignupRepository {
  MockSignupRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.SignupFailures<dynamic>, _i6.SocialCredential>>
      signupWithFacebook() => (super.noSuchMethod(
          Invocation.method(#signupWithFacebook, []),
          returnValue:
              Future<_i2.Either<_i5.SignupFailures<dynamic>, _i6.SocialCredential>>.value(
                  _FakeEither_0<_i5.SignupFailures<dynamic>,
                      _i6.SocialCredential>())) as _i4
          .Future<_i2.Either<_i5.SignupFailures<dynamic>, _i6.SocialCredential>>);
  @override
  _i4.Future<_i2.Either<_i5.SignupFailures<dynamic>, _i6.SocialCredential>>
      signupWithGoogle() => (super.noSuchMethod(
          Invocation.method(#signupWithGoogle, []),
          returnValue:
              Future<_i2.Either<_i5.SignupFailures<dynamic>, _i6.SocialCredential>>.value(
                  _FakeEither_0<_i5.SignupFailures<dynamic>,
                      _i6.SocialCredential>())) as _i4
          .Future<_i2.Either<_i5.SignupFailures<dynamic>, _i6.SocialCredential>>);
  @override
  _i4.Future<
      _i2.Either<_i5.SignupFailures<dynamic>,
          _i2.Unit>> createUserWithEmailAndPassword({_i7.UserEnitity? user}) =>
      (super.noSuchMethod(
          Invocation.method(#createUserWithEmailAndPassword, [], {#user: user}),
          returnValue:
              Future<_i2.Either<_i5.SignupFailures<dynamic>, _i2.Unit>>.value(
                  _FakeEither_0<_i5.SignupFailures<dynamic>, _i2.Unit>())) as _i4
          .Future<_i2.Either<_i5.SignupFailures<dynamic>, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i5.SignupFailures<dynamic>, _i2.Unit>> createUserWithSocial(
          {_i7.UserEnitity? user, _i6.SocialCredential? credential}) =>
      (super.noSuchMethod(
          Invocation.method(#createUserWithSocial, [],
              {#user: user, #credential: credential}),
          returnValue:
              Future<_i2.Either<_i5.SignupFailures<dynamic>, _i2.Unit>>.value(
                  _FakeEither_0<_i5.SignupFailures<dynamic>, _i2.Unit>())) as _i4
          .Future<_i2.Either<_i5.SignupFailures<dynamic>, _i2.Unit>>);
}
